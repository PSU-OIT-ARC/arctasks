[DEFAULT]
; NOTE: Values must be valid JSON

; This must be set per project
package = null
distribution = "${package}"

python.version = "3.3"

; Local
venv = ".env"
site_packages = "${venv}/lib/python${python.version}/site-packages"

; Default bin directories; will be added to local $PATH
bin.dirs = [
        "${venv}/bin",
        "node_modules/.bin",
        "${package}:static/node_modules/.bin"
    ]
bin.python = "${venv}/bin/python"
bin.pip = "${venv}/bin/pip"
wsgi_file = "${package}/wsgi.py"

; Pip
pip.version = null
pip.requirements = "requirements.txt"
virtualenv.version = "15.1.0"
virtualenv.base_name = "virtualenv-${virtualenv.version}"
virtualenv.tarball_name = "${virtualenv.base_name}.tar.gz"
virtualenv.download_url = "https://github.com/pypa/virtualenv/archive/${virtualenv.version}.tar.gz"

; Local paths
path.build.root = "${cwd}/build/${version}"
path.build.dist = "${path.build.root}/dist"
path.build.static_root = "${path.build.root}/static"

; Django
django_settings_module = "${package}.settings"
local_settings_file = "local.${env}.cfg"

; Database
db.type = "postgresql"
db.user = "${package}"
db.port = "5432"
db.name = "${package}"

service.user = "${current_user}"
service.group = ""

; Remote connection info

; User to connect as
remote.user = "${current_user}"
remote.host = "hrimfaxi.oit.pdx.edu"
; User to run commands as using `sudo -u`
remote.run_as = "${service.user}"
remote.append_path = "/usr/pgsql-9.4/bin"

; Remote system Python (used for bootstrapping)
remote.python.version = "3.3"
remote.bin.python = "/usr/bin/python${remote.python.version}"

; Remote paths

; Project root directory
remote.path.root = "/vol/www/${package}"
; Pointer to active build for env (stage, prod)
remote.path.env = "${remote.path.root}/${env}"
remote.path.wsgi_dir = "${remote.path.env}/wsgi"
remote.path.wsgi_file = "${remote.path.wsgi_dir}/wsgi.py"
; etc
remote.path.etc.root = "${remote.path.root}/etc/${env}"
; var
remote.path.var.root = "${remote.path.root}/var/${env}"
; var/log
remote.path.var.log = "${remote.path.var.root}/log"
remote.path.log_dir = "${remote.path.var.log}"
remote.path.access_log = "${remote.path.var.log}/access.log"
remote.path.error_log = "${remote.path.var.log}/error.log"
; Media and static directories for env
remote.path.media = "${remote.path.root}/media/${env}"
remote.path.static = "${remote.path.root}/static/${env}"

; Build root for env; contains all the builds for an env
remote.build.root = "${remote.path.root}/builds/${env}"
; Where the current build will be built and what remote.path.env will end up pointing at
remote.build.dir = "${remote.build.root}/${version}"
remote.build.local_settings_file = "${remote.build.dir}/local.cfg"
; Virtualenv for build
remote.build.venv = "${remote.build.dir}/.env"
remote.build.bin = "${remote.build.venv}/bin"
remote.build.pip = "${remote.build.bin}/pip"
remote.build.python = "${remote.build.bin}/python"
; Source distributions for build
remote.build.dist = "${remote.build.dir}/dist"
remote.build.manage_template = "arctasks:templates/manage.py.template"
remote.build.manage = "${remote.build.dir}/manage.py"
remote.build.restart_template = "arctasks:templates/restart.template"
remote.build.restart = "${remote.build.dir}/restart"
remote.build.wsgi_dir = "${remote.build.dir}/wsgi"
remote.build.wsgi_file = "${remote.build.wsgi_dir}/wsgi.py"
remote.build.wsgi_module = "${package}.wsgi"

; Pip root directory for env
remote.pip.root = "${remote.path.root}/pip/${env}"
; Shared pip cache for env
remote.pip.cache_dir = "${remote.pip.root}/cache"
; Shared pip wheel dir for env
remote.pip.wheel_dir = "${remote.pip.root}/wheels"
; ARC's local package index
remote.pip.find_links = "https://pypi.research.pdx.edu/dist/"

defaults.arctasks.base.virtualenv.where = "${venv}"

defaults.arctasks.remote.copy_file.host = "${remote.host}"
defaults.arctasks.remote.copy_file.user = "${remote.user}"
defaults.arctasks.remote.copy_file.run_as = "${service.user}"

defaults.arctasks.remote.rsync.host = "${remote.host}"
defaults.arctasks.remote.rsync.user = "${remote.user}"
defaults.arctasks.remote.rsync.run_as = "${service.user}"

defaults.runcommands.runners.commands.remote.user = "${remote.user}"
defaults.runcommands.runners.commands.remote.host = "${remote.host}"
defaults.runcommands.runners.commands.remote.cd = "${remote.build.root}"
defaults.runcommands.runners.commands.remote.append_path = "${remote.append_path}"
defaults.runcommands.runners.commands.remote.run_as = "${remote.run_as}"

[dev]
db.host = "localhost"

[docker]
db.host = "database"

[test]
db.host = "localhost"
local_settings_file = "local.base.cfg#test"

[stage]
db.user = "${db.name}_l"
db.host = "merope.rc.pdx.edu"
db.name = "${package}_stage"

[prod]
db.user = "${db.name}_l"
db.host = "postgresql.rc.pdx.edu"
db.name = "${package}"

[vagrant]
remote.host = "10.0.0.10"
service.user = "vagrant"
service.group = "apache"
